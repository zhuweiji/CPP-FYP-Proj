---
topics:
  - topic_name: C++ Basics
    description: Learn the basics of C++ - compiling and running your first hello world programs
    img_name: first_steps.jpg

    tutorials:
      - name: Hello World!
        description: "Learn to write your first C++ code!"
        id: 1

        tutorial_instructions: instructions1.txt
        expectedConsoleOutput: Hello CPP!
        prewritten_cpp_files: ""
        prewritten_tests: ""

      - name: Variable and List Instantialization
        description: "Learn about the different ways you can instantiate a variable in C++"
        id: 2
        no_tutorial: True

      - name: Loops and Control Structures
        id: 3
        no_tutorial: True

      - name: Preprocessor Directives (#)
        id: 4
        no_tutorial: True

      - name: Forward Declarations And Header Files
        id: 5
        no_tutorial: True

      - name: "Exercise: Use Predefined Code To Create A Calculator"
        id: 6

      - name: Data Types
        id: 7
        no_tutorial: True

      - name: Pointers
        id: 8
        no_tutorial: True

  - topic_name: Object Oriented Design in C++
    description: Implement the Object Oriented principles in C++ to make your understanding of OOP language agnostic
    img_name: corgi_and_friend.jpg

    tutorials:
      - name: Basics of Object Oriented Programming in C++
        id: 1
        no_tutorial: True

      - name: Creating a C++ Object.
        id: 2
        no_tutorial: True

      - name: Clean Code
        id: 3
        no_tutorial: True

      - name: Object Relationships
        id: 4
        description: ""
        no_tutorial: True

      - name: "(SOLID) Single Responsibility Principle"
        id: 5
        description: Don't build anything that does everything.
        no_tutorial: True

      - name: "(SOLID) Open-Closed Principle (OCP)"
        id: 6
        no_tutorial: True

      - name: "(SOLID) Liskov Substitution Principle (LSP)"
        id: 7
        no_tutorial: True

      - name: "(SOLID) Interface Segregation Principle (ISP)"
        id: 8
        no_tutorial: True

      - name: "(SOLID) Dependency Injection Principle (DIP)"
        id: 9

      - name: "YAGNI"
        id: 10

  # - topic_name: Tutorial 3 - Conceptual Representations to Code
  #   description: Build familiarity by creating things in C++ using a specification
  #   img_name: convoluted_diagram.jpg
  #   tutorials:
  #     - name: Class Diagrams? I Don't Go To Class.
  #       id: 1
  #     - name: UML Diagrams
  #       id: 2
  #     - name: Sit ad ullamco fugiat pariatur ea ex do non enim aliquip.
  #       id: 3
  #     - name: Velit culpa sint velit ex aliquip laborum nulla consequat laboris labore aliquip.
  #       id: 4
  #     - name: Elit pariatur esse est elit ut Lorem eiusmod dolor ad consequat nostrud et aliqua nostrud.
  #       id: 5
  #     - name: Sit ad ullamco fugiat pariatur ea ex do non enim aliquip.
  #       id: 6
  #     - name: Velit culpa sint velit ex aliquip laborum nulla consequat laboris labore aliquip.
  #       id: 7

  - topic_name: Capstone Project - Building the Final Year Project Management System (FYPMS)
    description: Use the information you have learnt and some new design principles to implement a new system
    img_name: mountain_peak.jpg

    tutorials:
      - name: Understanding The Project
        id: 1
        no_tutorial: True
      - name: Building Some Classes With Aggregation, Composition And Inheritance
        id: 2
        no_tutorial: True
      - name: Using Upcasting And Downcasting
        id: 3
        no_tutorial: True
      - name: Design Principle 1 - Singleton
        description: Use the Singleton pattern to ensure that only one instance of a class exists in the application
        id: 4
        no_tutorial: True
      - name: Design Principle 2 - Observer
        description: Use the Observer pattern to ensure that when one object changes state, all its dependents are notified and updated automatically
        id: 5
        no_tutorial: True

  - topic_name: Capstone Project - Building a simple game (SnakeEyes)
    description: Use the information you have learnt and some new design principles to implement a simple game
    img_name: lens_mountain.jpg

    tutorials:
      - name: Understanding The Project
        id: 1
        no_tutorial: True
      - name: Building the Classes
        id: 2
        no_tutorial: True
      - name: Using Upcasting And Downcasting
        id: 3
        no_tutorial: True
      - name: Design Principle 1 - Singleton
        description: Use the Singleton pattern to ensure that only one instance of a class exists in the application
        id: 4
        no_tutorial: True
      - name: Design Principle 2 - Observer
        description: Use the Observer pattern to ensure that when one object changes state, all its dependents are notified and updated automatically
        id: 5
        no_tutorial: True

  # - topic_name: "(Advanced Tutorials) Common Design Patterns in Software Engineering"
  #   description: Build everything with software! Explore the power of OOP by building different projects (maintainably and sustainably)
  #   img_name: lens_mountain.jpg
  #   tutorials:
  #     - name: User Analytics
  #       id: 1
  #       description: Create multiple classes to store and manipulate data to ensure that different departments can get the data they need for user-analytics

  #     - name: Image Processing Pipeline
  #       id: 2
  #       description: Use a pipeline pattern to implement a simple image editor. Image editors have to be able to undo unglamorous edits, so we will ensure our system can do so

  #     - name: Data Access Objects
  #       id: 3
  #       description: Use the DAO pattern to read data from external sources, while ensuring that your code does not become reliant on data from only one provider

  #     - name: Data Manipulation and Cleaning
  #       id: 4
  #       description: Use method chaining to make your data science notebooks readable, even after you return to the office after a long holiday

  #     - name: Hiding the Spaghetti
  #       id: 5
  #       description: Create a Facade to minimise the complexity that others (or more likely, yourself in a few weeks time) will face when using your modules

  #     - name: Observers (Pub/Sub)
  #       id: 6
  #       description: Write code to listen to the rise and fall of currency rates to ensure that you can exchange your SGD to USD at the most favourable rates

  #     - name: Unit Tests
  #       id: 7
  #       description: ""

  #     - name: Application Programming Interfaces (API)
  #       id: 8
  #       description: ""
