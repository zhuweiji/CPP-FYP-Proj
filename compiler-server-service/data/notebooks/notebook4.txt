# Forward Declarations 

Try running the following code:

<Editor nofiles=false, noerrors=false, nocompile=false >int main(){
    add(1,2);
}

int add(int v1, int v2){
    return v1+v2;
    }
} </Editor>


The code doesn't run because the function add() was not defined at the time that it was called in main(). \n
To solve this, we can either write the definition of add() above main():

<Editor nofiles=false, noerrors=false, nocompile=false >int add(int v1, int v2){
    return v1+v2;
}

int main(){
    add(1,2);
} </Editor>

Or we could add a function declaration for add() before main()

<Editor nofiles=false, noerrors=false, nocompile=false >int add(int v1, int v2);

int main(){
    add(1,2);
}

int add(int v1, int v2){
    return v1+v2;
    }
} </Editor>

As you can see, a function declaration contains only the function name, return type, and parameters of the function. \n
This is also called the function's signature.

It serves to tell the compiler that the function add() exists and is declared elsewhere. \n
The actual code (the function definition) can be written below or in another file.

## Header files

In C++, it is standard practice to write the function declarations (only the function signature) in a header file (with the .h extension or in some cases, .hpp ),\nand the function definitions (the actual code) in .cpp files. The .h and .cpp should have the same name for consistency.

Lets try writing one now.

There are two parts to a header file: \n
1. The header guard
2. The function declarations

We will go through why we need to have header guards in the next section.

In the add.h file:

<Editor nofiles=false, noerrors=false, nocompile=false >//header guards
    #ifndef ADD_H
    #define ADD_H 

    //function declarations
    int add(int v1, int v2);
    #endif
    } </Editor>

In the add.cpp file:

<Editor nofiles=false, noerrors=false, nocompile=false >#include "add.h"
    int add(int v1, int v2){return v1+v2;}
} </Editor>

It is standard practice to have the .cpp code file #include the header file.
Take note that we use #include "add.h" instead of <add> as we are including a user-defined file.


# Header Guards

A function or variable can only be defined once. 

<Editor nofiles=true, noerrors=false, nocompile=false >void add(){};
void add(){};
int main() {
    add();
} </Editor>

When we have files that we will #include, there is a chance that it may be #included twice, causing a duplicate definition error.

Therefore, we use header guards to only include header files once, so that this will not happen.
