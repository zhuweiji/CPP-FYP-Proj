# Preprocessor Directives

Preprocessor directives are statements such as 

`#include <iostream>`
`#include "car.h"`
`#ifndef MYFILE_H`

These are statements that are run before the rest of the code is compiled. \n
There are several types of preprocessor directives that are important to us.


## Include

The #include directive is the one you will be using most often.

There are two forms of #include: 
The one with angle brackets - <> \n
These are used for files from the standard library, such as iostream 

`include <iostream>`

There are also the ones with quotes - "
These are used for user-written files, such as the files you create

`#include "Car.h"`

## Macro Defines

The #define directive tells the preprocessor to replace a value with another

For example, the following directive will replace all occurences of `SECRET_KEY` in the code with the value password123

<Editor nofiles=true, noerrors=false, nocompile=true >#define SECRET_KEY password123

bool loginToDatabase(){
    // when the code is compiled, this becomes
    // database.login_using_key(password123);
    database.login_using_key(SECRET_KEY);
    
}
</Editor>


It is preferred to avoid this usage of #define, and use const variables instead. However, we introduce this concept as you may encounter this in older code.


You can also use the #define directive without a value to replace with.

`#define SECRET KEY`

In this case, `SECRET_KEY` would just be removed from the code. 


## Conditional Compilation

[What are development and production environments?]^{An example of an development environment is you creating code on your own computer! A production environment would be one where your code has been tested thoroughly and is deployed onto some server for full-scale use.}

<Editor nofiles=true, noerrors=false, nocompile=true >#ifdef IS_DEV
    // your code here
    std.cout << "hello! don't display me in a production environment!";
#endif </Editor>


The #ifdef (if defined) directive tells the preprocessor to compile the code only if the identifier (ie SECRET_KEY) has already been #defined.

<Editor nofiles=true, noerrors=false, nocompile=true >#ifndef IS_DEV
    // your code here
    std.cout << "hello! welcome to our important application!";
#endif </Editor>

The #ifndef (if not defined) is the opposite of #ifdef, checking if the identifier has not been defined. 


## Additional Information

The preprocessor does not handle directives like C++ code. It processes the entire file for directives before any C++ code is compiled, and only compiles the C++ code after.  \n
Think of the preprocessor as a program who will go through your code and modify it without looking at the C++ code itself.

`if (false){
    #define MY_NAME "Alex"
}`

Importantly, this means that any code above and below the #define does not affect it. The #define statement is processed before any code is compiled. 
The program functions the same as if the #define was written outside of the if statement.

[Best Practice]
You should write any #define statements outside functions and conditional statements to avoid confusion.

The preprocessor modifies code on a file-by-file basis.
This means that #defines in one file will not affect another. 

Consider the following code: 

`#include <iostream>\n\nvoid doSomething(){\n    #ifdef PRINT\n        std::cout << "Printing!";\n    #endif\n\n    #ifndef PRINT\n        std::cout << "Not printing!";\n    #endif\n}\n\nvoid doSomething(); // forward declaration for function doSomething()\n\n#define PRINT\nint main(){\n    doSomething();\n    return 0;\n}`

The above program will print:

`Not printing!`

Attribution: Some of the code here was taken from https://www.learncpp.com/cpp-tutorial/introduction-to-the-preprocessor/, which has a more detailed write-up if you are interested.