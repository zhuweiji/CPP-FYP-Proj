# Hello there!

Welcome to Comprehend C++!!
This is a website that was created specifically to help you learn programming in Object Oriented Programming in C++ \n
We hope that through this website will help your learning process, and make it more interesting!

## Prerequisites


This application was built for the OODP course in Nanyang Technological University. 
Any views expressed in this application are solely those of the author and do not represent that of the University. 
While we have tried to source all our work as appropriate under fair use, if there is any work which you believe should not be on this site, please contact me at wzhu002@e.ntu.edu.sg

This course assumes that you have some basic familiarity with programming. \n
The following knowledge is presumed:
    1. Basic Data Structures (e.g. ints, bools, lists)
    2. Loops and If Statements
    3. Functions

## A short introduction to these tutorials

As you may have experienced, setting up the development environment is sometimes 90 percent of the trouble. 
The work involved in preparing your computer to be able to write code, such as by installing the compiler for a programming language , the code editor or IDE (such as VSCode, PyCharm) is enormous. \n
To help you with this, we have created the some tools to make it easier for you to get started on writing code quickly, so that you can focus on the other 90 percent of the trouble that is actually learning the programming language.

### Links and Tooltips

Firstly, there might be underlined blue text like this: [links](https://learn.microsoft.com/en-us/cpp/?view=msvc-170) , which are links. This one is a link to the official C++ documentation by Microsoft. 

There are also some tooltips that may hold additional information, such as more detailed explainations of concepts or good coding practices highlighted for you.
One such tooltip is provided below, and they are usually in dark green.

[Here is a tooltip you can hover on!]^{Helpful information would be placed here, so look out for these tooltips!} 

### Code Editors

There are code editors that will allow you to run code to have a better understanding of the material. Here's one below. \n
Don't worry about the code for now, just try running it and see what happens!

<Editor nofiles=true, noerrors=false, nocompile=false >
#include <iostream>
int main() {
    std::cout << "hello world!";
    return 0;
} </Editor>

The output of the code comes in a certain format:

<Code>
CodeExecutionResult: Success - The first line is a summary of what happened after you compiled your code. You can usually ignore this line \n
There are two outputs: stdout and stderr, and these are displayed on two seperate lines as 
out >   (normal output)
err >   (error output)
</Code>

[More information about stderr and stdout]^{There are three standard streams for input and output in both Unix and Windows: stdin (standard input), stdout (standard output) and stderr (standard error). Typically when you run programs through your IDE or shell you will only see one output, but this is a merged stream of both stdout and stderr.}


Some editors will also allow you to create and remove new files. 
All the files and code you write will be compiled together and run. We will learn more about this in the next topics! \n
There are three files in the editor below:

<Code>
1. main.cpp
2. add.cpp
3. add.h
</Code>

All the files will be compiled together and run when you click the compile button. Try running the code now!


<EditorGroup nofiles=false, noerrors=false, nocompile=false>
<EditorFile  filename=main.cpp>
#include <iostream>
#include "add.h"
int main(){
    std::cout << add(1,2);
}
</EditorFile>

<EditorFile filename=add.cpp >#include "add.h"
int add(int v1, int v2){
    return v1+v2;
}
</EditorFile>    

<EditorFile filename=add.h >
int add(int v1, int v2);
</EditorFile>    

</EditorGroup>

# Programing in C++

Through these tutorials we will try to build some familiarity with C++, although the focus of this course is on Object Oriented Programming. \n
Therefore, we will only be going through enough C++ knowledge to be able to start coding OOP. To learn more about C++ itself, you can use the link below which goes into in-depth detail about C++. It is also tailored for absolute beginners to programming, although advanced readers familliar with other languages will have a lot of juicy material to dig into as well.

[More about C++](https://learncpp.com)

Otherwise, let's get started!

## The main() function


When writing a C++ program, you must first write the `main()` function. This function serves as the entry point to the program.
This is where the C++ compiler will look to start your code. 

This is similar to the `public static void main(string args)` method of Java.

The type (int, boolean, etc.) returned by a function or a variable is written on the left of its name.

All the code included in a function should be enclosed in curly braces.

`int main(){
    return 0;
}`

Below, we have a file with just a function, a(), but no main function. Try running it, and see what happens! You should get an error, telling you that main() was not defined.

<Editor nofiles=true, noerrors=false>
// this code will result in an error
int a(){
    return 0;
} </Editor>


Here, we have another program with a main() function.  
This file runs well, and no errors are reported.

<Editor nofiles=true, noerrors=false>int main() {
    return 0;
} </Editor>


## std::cin and std::cout


Every program takes in some kind of input and returns some kind of output. 
This ranges from the most basic calculator to the most complex stock market prediction algorithm. \n
The most basic way to provide input and output is through the terminal (or command line). You have already seen the terminal in action, as the display right below each editor.


We can display some text ("Hello World!") on the terminal with the following code:


<Editor nofiles=true, noerrors=false, nocompile=false >#include <iostream>
int main() {
    std::cout << "Hello World!";
    return 0;
} </Editor>

Let's break down what we did here.

C++ has many pre-built libraries, such as the input/output library (iostream) that deals with reading and writing input and output from the standard streams. \n
We used the `#include <iostream>`  line to include the iostream library in our code. \n
This allows us to read from and write to the terminal.


As part of the iostream library, there are the functions std::cin and std::cout. They are short for character in (cin) and character out (cout). 
We use the insertion operator << to display the data on the right of the std::cout function. 

If you squint your eyes and imagine that std::cout is your terminal or your display,
you can see that `std::cout << "Hello World"` is like moving "Hello World" into your terminal.

std::cin does the opposite, reading from the standard input stream in your terminal. `std::cin >> my_variable;`

However, you'll have to try this on your own device as we do not support this functionality :(


## Newlines: std::endl vs \n

[What is a newline character?]^{If you imagine your terminal as a typewriter printing a series of characters (a-z) onto paper, you have to press a button to make the typewriter go to a new line. When typing an essay, typically you will use the enter key. The terminal is the same, and it moves on to a new line when it sees the newline special character}

The code below does not have the newline character, so all the output comes out together on one line.

<Editor nofiles=true, noerrors=false, nocompile=false >#include <iostream>
int main() {
    std::cout << "Mary: 'Good Morning!'";
    std::cout << "John: 'How was your day?'";
    std::cout << "Mary: 'It was great!'";
    std::cout << "Mary: 'I had a big breakfast!'";

    return 0;
} </Editor>

We can fix this by using the newline character. 

<Editor nofiles=true, noerrors=false, nocompile=false >#include <iostream>
int main() {
    std::cout << "Mary: 'Good Morning!'\n";
    std::cout << "John: 'How was your day?'\n";
    std::cout << "Mary: 'It was great!'\n";
    std::cout << "Mary: 'I had a big breakfast!'\n";

    return 0;
} </Editor>

You may see some people using the std::endl function instead

`std::cout << "Mary: 'Good Morning!'" << std::endl;`

This is also acceptable, but may be slower if you are doing a lot of printing to the console.

[What is the difference?]^{Using std::endl can be a bit inefficient, as it actually does two jobs: it moves the cursor to the next line of the console, and it flushes the buffer. When writing text to the console, we typically don't need to flush the buffer at the end of each line. It's more efficient to let the system flush itself periodically (which it has been designed to do efficiently). Because of this, use of the '\n' character is typically preferred instead. The '\n' character moves the cursor to the next line of the console, but doesn't request a flush, so it will often perform better. The '\n' character also tends to be easier to read since it's both shorter and can be embedded into existing text. [1]}



### Attributions and Extra Info

For more information, check out the discussion about std::endl buffering here: [introduction-to-iostream-cout-cin-and-endl](https://www.learncpp.com/cpp-tutorial/introduction-to-iostream-cout-cin-and-endl/) [1]