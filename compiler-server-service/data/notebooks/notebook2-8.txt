# Interface Segregation Principle

The Interface Segregation Principle (ISP) is a principle of object-oriented design that states that no client should be forced to depend on methods it does not use. In other words, a class should not be required to implement methods that it does not need.

This principle is important because it encourages modularity and reduces coupling between classes, making it easier to maintain and extend codebases.

To follow the Interface Segregation Principle, we should break down large interfaces into smaller, more specific ones, so that clients can depend only on the methods they actually need. This also makes it easier to add new methods or change existing ones without affecting unrelated clients.

Here's an example to illustrate the Interface Segregation Principle:

<Editor nofiles=false, noerrors=false, nocompile=false >
#include <stdexcept>

class Machine {
public:
    virtual void print() = 0;
    virtual void scan() = 0;
    virtual void copy() = 0;
};

class Printer : public Machine {
public:
    void print() override {
        // print implementation
    }
    void scan() override {
        // unsupported operation
        throw std::runtime_error("Unsupported operation");
    }
    void copy() override {
        // unsupported operation
        throw std::runtime_error("Unsupported operation");
    }
};

class Scanner : public Machine {
public:
    void print() override {
        // unsupported operation
        throw std::runtime_error("Unsupported operation");
    }
    void scan() override {
        // scan implementation
    }
    void copy() override {
        // unsupported operation
        throw std::runtime_error("Unsupported operation");
    }
};

class Copier : public Machine {
public:
    void print() override {
        // unsupported operation
        throw std::runtime_error("Unsupported operation");
    }
    void scan() override {
        // unsupported operation
        throw std::runtime_error("Unsupported operation");
    }
    void copy() override {
        // copy implementation
    }
};

class PrinterScanner : public Machine {
public:
    void print() override {
        // print implementation
    }
    void scan() override {
        // scan implementation
    }
    void copy() override {
        // unsupported operation
        throw std::runtime_error("Unsupported operation");
    }
};

class PrinterCopier : public Machine {
public:
    void print() override {
        // print implementation
    }
    void scan() override {
        // unsupported operation
        throw std::runtime_error("Unsupported operation");
    }
    void copy() override {
        // copy implementation
    }
};

int main(){
    return 0;
}
</Editor>

<MermaidDiagram>
classDiagram
    class Machine {
        +void print()
        +void scan()
        +void copy()
    }
    class Printer {
        +void print()
        +void scan()
        +void copy()
    }
    class Scanner {
        +void print()
        +void scan()
        +void copy()
    }
    class Copier {
        +void print()
        +void scan()
        +void copy()
    }
    class PrinterScanner {
        +void print()
        +void scan()
    }
    class PrinterCopier {
        +void print()
        +void copy()
    }
    Machine <|-- Printer
    Machine <|-- Scanner
    Machine <|-- Copier
    PrinterScanner --|> Printer
    PrinterScanner --|> Scanner
    PrinterCopier --|> Printer
    PrinterCopier --|> Copier

</MermaidDiagram>

In this example, we have a Machine interface that defines three methods: print(), scan(), and copy(). However, not all machines support all three operations. For example, a printer may only support printing, while a scanner may only support scanning.

To follow the Interface Segregation Principle, we have broken down the large Machine interface into smaller, more specific interfaces: Printable, Scanable, and Copyable. Each class now implements only the methods it needs, and we have also created new classes that combine different interfaces as needed, such as PrinterScanner and PrinterCopier.

This approach allows clients to depend only on the methods they actually need, and makes it easier to add new methods or change existing ones without affecting unrelated clients.

<Editor nofiles=false, noerrors=false, nocompile=false >
class Printable {
public:
    virtual void print() = 0;
};

class Scanable {
public:
    virtual void scan() = 0;
};

class Copyable {
public:
    virtual void copy() = 0;
};

class Printer : public Printable {
public:
    void print() override {
        // print implementation
    }
};

class Scanner : public Scanable {
public:
    void scan() override {
        // scan implementation
    }
};

class Copier : public Copyable {
public:
    void copy() override {
        // copy implementation
    }
};

class PrinterScanner : public Printable, public Scanable {
public:
    void print() override {
        // print implementation
    }
    void scan() override {
        // scan implementation
    }
};

class PrinterCopier : public Printable, public Copyable {
public:
    void print() override {
        // print implementation
    }
    void copy() override {
        // copy implementation
    }
};

int main(){
    return 0;
}
</Editor>

<MermaidDiagram>
classDiagram
class Printable {
    <<interface>>
    +void print()
}
class Scanable {
    <<interface>>
    +void scan()
}
class Copyable {
    <<interface>>
    +void copy()
}
class Printer {
    +void print()
}
class Scanner {
    +void scan()
}
class Copier {
    +void copy()
}
class PrinterScanner {
    +void print()
    +void scan()
}
class PrinterCopier {
    +void print()
    +void copy()
}

Printable <|.. Printer
Scanable <|.. Scanner
Copyable <|.. Copier
Printable <|.. PrinterScanner
Scanable <|.. PrinterScanner
Printable <|.. PrinterCopier
Copyable <|.. PrinterCopier

</MermaidDiagram>
