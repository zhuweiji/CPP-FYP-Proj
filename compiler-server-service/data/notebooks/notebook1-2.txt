# Value and List Instantialization 

There are several ways to initialize (create) a variable.

### Default Initialization

By default, built-in data types such as int, float, and double are not initialized to any particular value. This means that they will contain whatever data happened to be stored in that memory location before. For example:

<Code>
int num;
float f;
double d;
</Code>

Depending on the C++ compiler you use, the variables num, f, and d will either contain \n
1. garbage values
2. a reasonable default like zero for integrals (ints, floats)

It is best to zero initialize your variables using one of the methods described below in most cases.

### Value Initialization

<Code>
int num = 42;
float f = 3.14f;
double d = 3.14159265359;
</Code>

### Uniform Initialization

C++11 introduced a new syntax for initializing variables called uniform initialization. This syntax uses curly braces to enclose the initialization expression:

<Code>
int num{42};
float f{3.14f};
double d{3.14159265359};
</Code>

Uniform initialization can be used to initialize complex objects such as arrays, structures, and classes, as well as built-in data types. It has the advantage of being more concise and consistent than other initialization syntaxes.

On this site, we will sometimes interchange between Uniform (Brace) Initialization and Value Initialization. 

There are differences between the various forms of initialization, but they shouldn't be too important for this course.

### More information 

[learncpp](https://www.learncpp.com/cpp-tutorial/variable-assignment-and-initialization/)

[stackoverflow](https://stackoverflow.com/questions/1051379/is-there-a-difference-between-copy-initialization-and-direct-initialization)